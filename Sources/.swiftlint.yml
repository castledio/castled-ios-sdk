excluded: # paths to ignore during linting. Takes precedence over `included`.
    - Carthage
    - Pods

disabled_rules: # rule identifiers to exclude from running
#    - trailing_whitespace
    - force_cast
    - force_unwrapping
    - force_try
    - empty_enum_arguments
    - overridden_super_call
    - sorted_imports
    - cyclomatic_complexity
    - explicit_init             # Default configuration: warning
    - first_where               # Default configuration: warning
#    - number_separator          # Default configuration: warning, minimum_length: 0
    - explicit_failure_calls
    - fatal_error_message
    - vertical_parameter_alignment_on_call
    - multiline_parameters
#    - multiple_empty_lines # Defined into custom roles
    - nesting
    - private_outlet
    - prohibited_super_call
    - protocol_property_accessors_order
    - redundant_nil_coalescing
    - syntactic_sugar
#    - comments_capitalized_ignore_possible_code
#    - already_bool
    - switch_case_alignment
    - unneeded_break_in_switch
    - for_where
    - redundant_string_enum_value
    - multiple_closures_with_trailing_closure
    - nsobject_prefer_isequal

opt_in_rules: # some rules are only opt-in
  - empty_count
  - empty_string              # Default configuration: warning
#  - number_separator
  - closure_end_indentation   # Default configuration: warning
  - closure_spacing           # Default configuration: warning

  # Find all the available rules by running:
  # swiftlint rules
included: # paths to include during linting. `--path` is ignored if present.
  - Castled
  - CastledNotificationContent
  - CastledNotificationService

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
  - "*.framework"
  

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
#force_try:
#  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 500
# they can set both implicitly with an array
function_body_length:
  - 500 # warning
  - 600 # error
# or they can set both explicitly

file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
identifier_name:
  allowed_symbols: "_"
  min_length: # only min_length
    error: 2 # only error
    warning: 2
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
vertical_whitespace: # warning, max_empty_lines: 1
    max_empty_lines: 1
#number_separator:
#    minimum_length: 8
large_tuple:
    warning: 4
    error: 5

custom_rules:
    comments_space: # From https://github.com/brandenr/swiftlintconfig
        name: "Space After Comment"
        regex: '(^ *//\w+)'
        message: "There should be a space after //"
        severity: warning
    comma_space_rule:
                include: "*.swift"
                regex: '([}]\n[[:blank:]]*func\s\w+(\(.*\))\s[{])'
                name: "Single line space between functions"
                message: "Single line space violation: Expected single whitespace between functions"
                severity: warning
                
#    comments_capitalized_ignore_possible_code:
#        name: "Capitalize First Word In Comment"
#        regex: "(^ +// +(?!swiftlint)[a-z]+)"
#        message: "The first word of a comment should be capitalized"
#        severity: warning

    explicit_failure_calls:
        name: “Avoid asserting ‘false’”
        regex: ‘((assert|precondition)\(false)’
        message: “Use assertionFailure() or preconditionFailure() instead.”
        severity: warning

#    multiple_empty_lines:
#        name: "Multiple Empty Lines"
#          regex: '((?<!//.*)\n\s*\n)+'
#
#        message: "There are too many line breaks"
#        severity: error

    force_https: # From https://github.com/Twigz/Game
        name: "Force HTTPS over HTTP"
        regex: "((?i)http(?!s))"
        match_kinds: string
        message: "HTTPS should be favored over HTTP"
        severity: warning

#    already_true:
#        regex: "== true"
#        message: "Don't compare to true, just use the bool value."
#
#    already_bool:
#        regex: "== false"
#        message: "Don't compare to false, just use !value."
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, junit, html, emoji)
